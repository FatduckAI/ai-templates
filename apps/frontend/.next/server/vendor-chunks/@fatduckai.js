"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@fatduckai";
exports.ids = ["vendor-chunks/@fatduckai"];
exports.modules = {

/***/ "(ssr)/../../node_modules/@fatduckai/ai/dist/index.js":
/*!******************************************************!*\
  !*** ../../node_modules/@fatduckai/ai/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PromptBuilder: () => (/* binding */ PromptBuilder)\n/* harmony export */ });\n// src/linter.ts\nclass Linter {\n  context;\n  allowEmptyContent;\n  constructor(context = {}, allowEmptyContent = false) {\n    this.context = context;\n    this.allowEmptyContent = allowEmptyContent;\n  }\n  lint(template) {\n    const results = [];\n    const hasSystemPrompt = template.blocks.some((block) => block.type === \"system\");\n    if (!hasSystemPrompt) {\n      results.push({\n        message: \"Template should start with a system prompt\",\n        severity: \"warning\",\n        line: 1,\n        column: 1\n      });\n    }\n    template.variables.forEach((variable) => {\n      if (!(variable in this.context)) {\n        results.push({\n          message: `Required variable not provided: ${variable}`,\n          severity: \"error\",\n          line: this.findVariableLocation(variable, template.raw),\n          column: 1\n        });\n      } else if (!this.allowEmptyContent) {\n        const value = this.context[variable];\n        if (value === undefined || value === null || value.toString().trim() === \"\") {\n          results.push({\n            message: `Empty content not allowed for variable: ${variable}`,\n            severity: \"error\",\n            line: this.findVariableLocation(variable, template.raw),\n            column: 1\n          });\n        }\n      }\n    });\n    return results;\n  }\n  findVariableLocation(variable, content) {\n    const match = new RegExp(`<${variable}>`, \"g\").exec(content);\n    if (!match)\n      return 1;\n    return (content.slice(0, match.index).match(/\\n/g) || []).length + 1;\n  }\n}\n\n// src/parser.ts\nclass Parser {\n  static parse(template) {\n    if (typeof template !== \"string\") {\n      throw new Error(\"Template must be a string\");\n    }\n    const blocks = [];\n    const variables = new Set;\n    const variableRegex = /<([^>]+)>/g;\n    const systemTags = new Set([\n      \"system\",\n      \"user\",\n      \"assistant\",\n      \"/system\",\n      \"/user\",\n      \"/assistant\"\n    ]);\n    const blockRegex = /<(system|user|assistant)(?:\\s+name=\"([^\"]*)\")?>([^]*?)<\\/\\1>/g;\n    let match;\n    while ((match = blockRegex.exec(template)) !== null) {\n      const [fullMatch, role, name, content] = match;\n      let varMatch;\n      while ((varMatch = variableRegex.exec(content)) !== null) {\n        const varName = varMatch[1];\n        if (!systemTags.has(varName)) {\n          variables.add(varName);\n        }\n      }\n      blocks.push({\n        type: role,\n        content: content.trim(),\n        name,\n        range: {\n          start: match.index,\n          end: match.index + fullMatch.length\n        }\n      });\n    }\n    return {\n      blocks,\n      variables: Array.from(variables),\n      raw: template\n    };\n  }\n}\n\n// src/builder.ts\nclass PromptBuilder {\n  template;\n  context = {};\n  linter;\n  options;\n  constructor(template, options = {}) {\n    this.template = template;\n    this.linter = new Linter;\n    this.options = {\n      validateOnBuild: true,\n      throwOnWarnings: false,\n      allowEmptyContent: false,\n      ...options\n    };\n  }\n  withContext(context) {\n    if (!this.options.allowEmptyContent) {\n      Object.entries(context).forEach(([key, value]) => {\n        if (value === undefined || value === null || value.toString().trim() === \"\") {\n          throw new Error(`Empty content not allowed for \"${key}\". Set allowEmptyContent to true to allow empty, null, or undefined values.`);\n        }\n      });\n    }\n    this.context = { ...this.context, ...context };\n    this.linter = new Linter(this.context, this.options.allowEmptyContent);\n    return this;\n  }\n  validate() {\n    try {\n      const parsed = Parser.parse(this.template);\n      const lintResults = this.linter.lint(parsed);\n      return {\n        isValid: !lintResults.some((r) => r.severity === \"error\"),\n        errors: lintResults.filter((r) => r.severity === \"error\").map((e) => `Line ${e.line}: ${e.message}`),\n        warnings: lintResults.filter((r) => r.severity === \"warning\").map((w) => `Line ${w.line}: ${w.message}`),\n        info: lintResults.filter((r) => r.severity === \"info\").map((i) => `Line ${i.line}: ${i.message}`)\n      };\n    } catch (error) {\n      return {\n        isValid: false,\n        errors: [error instanceof Error ? error.message : String(error)],\n        warnings: [],\n        info: []\n      };\n    }\n  }\n  build() {\n    try {\n      if (this.options.validateOnBuild) {\n        const validation = this.validate();\n        if (!validation.isValid) {\n          throw new Error(`Template validation failed:\\n${validation.errors.join(\"\\n\")}`);\n        }\n        if (this.options.throwOnWarnings && validation.warnings.length > 0) {\n          throw new Error(`Template has warnings:\\n${validation.warnings.join(\"\\n\")}`);\n        }\n      }\n      const parsed = Parser.parse(this.template);\n      return parsed.blocks.filter((block) => block.type === \"system\" || block.type === \"user\" || block.type === \"assistant\").map((block) => {\n        let content = block.content;\n        Object.entries(this.context).forEach(([key, value]) => {\n          const regex = new RegExp(`<${key}>`, \"g\");\n          const replacement = value === undefined || value === null ? \"\" : String(value);\n          content = content.replace(regex, replacement);\n        });\n        if (!content.trim() && !this.options.allowEmptyContent) {\n          throw new Error(`Empty content in ${block.type} block after variable replacement`);\n        }\n        const message = {\n          role: block.type,\n          content: content.trim()\n        };\n        if (block.name) {\n          message.name = block.name;\n        }\n        return message;\n      });\n    } catch (error) {\n      throw new Error(`Failed to build prompt: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n}\n\n\n//# debugId=440FA038CE44DDAB64756E2164756E21\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@fatduckai/ai/dist/index.js\n");

/***/ })

};
;